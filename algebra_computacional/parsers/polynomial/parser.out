Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> polynomial
Rule 1     polynomial -> statement
Rule 2     statement -> statement PLUS monomial
Rule 3     statement -> statement minmonomial
Rule 4     statement -> monomial
Rule 5     statement -> minmonomial
Rule 6     ringarith -> ringarith PLUS ringarith
Rule 7     ringarith -> ringarith MINUS ringarith
Rule 8     ringarith -> ringarith TIMES ringarith
Rule 9     ringarith -> ringarith DIVIDE ringarith
Rule 10    ringarith -> ringarith POWER arith
Rule 11    ringarith -> SCALAR
Rule 12    arith -> arith PLUS arith
Rule 13    arith -> arith MINUS arith
Rule 14    arith -> arith TIMES arith
Rule 15    arith -> arith DIVIDE arith
Rule 16    arith -> arith POWER arith
Rule 17    arith -> NUMBER
Rule 18    arith -> MINUS arith
Rule 19    minmonomial -> MINUS monomial
Rule 20    arith -> LPAREN arith RPAREN
Rule 21    exparith -> LPAREN arith RPAREN
Rule 22    exparith -> NUMBER
Rule 23    exparith -> <empty>
Rule 24    ringscalar -> LPAREN ringarith RPAREN
Rule 25    ringscalar -> SCALAR
Rule 26    ringscalar -> <empty>
Rule 27    monomial -> ringscalar VAR POWER exparith
Rule 28    monomial -> ringscalar VAR
Rule 29    monomial -> ringscalar

Terminals, with rules where they appear

DIVIDE               : 9 15
LPAREN               : 20 21 24
MINUS                : 7 13 18 19
NUMBER               : 17 22
PLUS                 : 2 6 12
POWER                : 10 16 27
RPAREN               : 20 21 24
SCALAR               : 11 25
TIMES                : 8 14
VAR                  : 27 28
error                : 

Nonterminals, with rules where they appear

arith                : 10 12 12 13 13 14 14 15 15 16 16 18 20 21
exparith             : 27
minmonomial          : 3 5
monomial             : 2 4 19
polynomial           : 0
ringarith            : 6 6 7 7 8 8 9 9 10 24
ringscalar           : 27 28 29
statement            : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . polynomial
    (1) polynomial -> . statement
    (2) statement -> . statement PLUS monomial
    (3) statement -> . statement minmonomial
    (4) statement -> . monomial
    (5) statement -> . minmonomial
    (27) monomial -> . ringscalar VAR POWER exparith
    (28) monomial -> . ringscalar VAR
    (29) monomial -> . ringscalar
    (19) minmonomial -> . MINUS monomial
    (24) ringscalar -> . LPAREN ringarith RPAREN
    (25) ringscalar -> . SCALAR
    (26) ringscalar -> .

    MINUS           shift and go to state 8
    LPAREN          shift and go to state 1
    SCALAR          shift and go to state 4
    VAR             reduce using rule 26 (ringscalar -> .)
    PLUS            reduce using rule 26 (ringscalar -> .)
    $end            reduce using rule 26 (ringscalar -> .)

  ! MINUS           [ reduce using rule 26 (ringscalar -> .) ]

    monomial                       shift and go to state 2
    minmonomial                    shift and go to state 3
    ringscalar                     shift and go to state 7
    statement                      shift and go to state 5
    polynomial                     shift and go to state 6

state 1

    (24) ringscalar -> LPAREN . ringarith RPAREN
    (6) ringarith -> . ringarith PLUS ringarith
    (7) ringarith -> . ringarith MINUS ringarith
    (8) ringarith -> . ringarith TIMES ringarith
    (9) ringarith -> . ringarith DIVIDE ringarith
    (10) ringarith -> . ringarith POWER arith
    (11) ringarith -> . SCALAR

    SCALAR          shift and go to state 9

    ringarith                      shift and go to state 10

state 2

    (4) statement -> monomial .

    PLUS            reduce using rule 4 (statement -> monomial .)
    MINUS           reduce using rule 4 (statement -> monomial .)
    $end            reduce using rule 4 (statement -> monomial .)


state 3

    (5) statement -> minmonomial .

    PLUS            reduce using rule 5 (statement -> minmonomial .)
    MINUS           reduce using rule 5 (statement -> minmonomial .)
    $end            reduce using rule 5 (statement -> minmonomial .)


state 4

    (25) ringscalar -> SCALAR .

    VAR             reduce using rule 25 (ringscalar -> SCALAR .)
    PLUS            reduce using rule 25 (ringscalar -> SCALAR .)
    MINUS           reduce using rule 25 (ringscalar -> SCALAR .)
    $end            reduce using rule 25 (ringscalar -> SCALAR .)


state 5

    (1) polynomial -> statement .
    (2) statement -> statement . PLUS monomial
    (3) statement -> statement . minmonomial
    (19) minmonomial -> . MINUS monomial

    $end            reduce using rule 1 (polynomial -> statement .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 8

    minmonomial                    shift and go to state 12

state 6

    (0) S' -> polynomial .



state 7

    (27) monomial -> ringscalar . VAR POWER exparith
    (28) monomial -> ringscalar . VAR
    (29) monomial -> ringscalar .

    VAR             shift and go to state 13
    PLUS            reduce using rule 29 (monomial -> ringscalar .)
    MINUS           reduce using rule 29 (monomial -> ringscalar .)
    $end            reduce using rule 29 (monomial -> ringscalar .)


state 8

    (19) minmonomial -> MINUS . monomial
    (27) monomial -> . ringscalar VAR POWER exparith
    (28) monomial -> . ringscalar VAR
    (29) monomial -> . ringscalar
    (24) ringscalar -> . LPAREN ringarith RPAREN
    (25) ringscalar -> . SCALAR
    (26) ringscalar -> .

    LPAREN          shift and go to state 1
    SCALAR          shift and go to state 4
    VAR             reduce using rule 26 (ringscalar -> .)
    PLUS            reduce using rule 26 (ringscalar -> .)
    MINUS           reduce using rule 26 (ringscalar -> .)
    $end            reduce using rule 26 (ringscalar -> .)

    monomial                       shift and go to state 14
    ringscalar                     shift and go to state 7

state 9

    (11) ringarith -> SCALAR .

    PLUS            reduce using rule 11 (ringarith -> SCALAR .)
    MINUS           reduce using rule 11 (ringarith -> SCALAR .)
    TIMES           reduce using rule 11 (ringarith -> SCALAR .)
    DIVIDE          reduce using rule 11 (ringarith -> SCALAR .)
    POWER           reduce using rule 11 (ringarith -> SCALAR .)
    RPAREN          reduce using rule 11 (ringarith -> SCALAR .)


state 10

    (24) ringscalar -> LPAREN ringarith . RPAREN
    (6) ringarith -> ringarith . PLUS ringarith
    (7) ringarith -> ringarith . MINUS ringarith
    (8) ringarith -> ringarith . TIMES ringarith
    (9) ringarith -> ringarith . DIVIDE ringarith
    (10) ringarith -> ringarith . POWER arith

    RPAREN          shift and go to state 15
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17


state 11

    (2) statement -> statement PLUS . monomial
    (27) monomial -> . ringscalar VAR POWER exparith
    (28) monomial -> . ringscalar VAR
    (29) monomial -> . ringscalar
    (24) ringscalar -> . LPAREN ringarith RPAREN
    (25) ringscalar -> . SCALAR
    (26) ringscalar -> .

    LPAREN          shift and go to state 1
    SCALAR          shift and go to state 4
    VAR             reduce using rule 26 (ringscalar -> .)
    PLUS            reduce using rule 26 (ringscalar -> .)
    MINUS           reduce using rule 26 (ringscalar -> .)
    $end            reduce using rule 26 (ringscalar -> .)

    monomial                       shift and go to state 21
    ringscalar                     shift and go to state 7

state 12

    (3) statement -> statement minmonomial .

    PLUS            reduce using rule 3 (statement -> statement minmonomial .)
    MINUS           reduce using rule 3 (statement -> statement minmonomial .)
    $end            reduce using rule 3 (statement -> statement minmonomial .)


state 13

    (27) monomial -> ringscalar VAR . POWER exparith
    (28) monomial -> ringscalar VAR .

    POWER           shift and go to state 22
    PLUS            reduce using rule 28 (monomial -> ringscalar VAR .)
    MINUS           reduce using rule 28 (monomial -> ringscalar VAR .)
    $end            reduce using rule 28 (monomial -> ringscalar VAR .)


state 14

    (19) minmonomial -> MINUS monomial .

    PLUS            reduce using rule 19 (minmonomial -> MINUS monomial .)
    MINUS           reduce using rule 19 (minmonomial -> MINUS monomial .)
    $end            reduce using rule 19 (minmonomial -> MINUS monomial .)


state 15

    (24) ringscalar -> LPAREN ringarith RPAREN .

    VAR             reduce using rule 24 (ringscalar -> LPAREN ringarith RPAREN .)
    PLUS            reduce using rule 24 (ringscalar -> LPAREN ringarith RPAREN .)
    MINUS           reduce using rule 24 (ringscalar -> LPAREN ringarith RPAREN .)
    $end            reduce using rule 24 (ringscalar -> LPAREN ringarith RPAREN .)


state 16

    (9) ringarith -> ringarith DIVIDE . ringarith
    (6) ringarith -> . ringarith PLUS ringarith
    (7) ringarith -> . ringarith MINUS ringarith
    (8) ringarith -> . ringarith TIMES ringarith
    (9) ringarith -> . ringarith DIVIDE ringarith
    (10) ringarith -> . ringarith POWER arith
    (11) ringarith -> . SCALAR

    SCALAR          shift and go to state 9

    ringarith                      shift and go to state 23

state 17

    (10) ringarith -> ringarith POWER . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 24

state 18

    (8) ringarith -> ringarith TIMES . ringarith
    (6) ringarith -> . ringarith PLUS ringarith
    (7) ringarith -> . ringarith MINUS ringarith
    (8) ringarith -> . ringarith TIMES ringarith
    (9) ringarith -> . ringarith DIVIDE ringarith
    (10) ringarith -> . ringarith POWER arith
    (11) ringarith -> . SCALAR

    SCALAR          shift and go to state 9

    ringarith                      shift and go to state 28

state 19

    (6) ringarith -> ringarith PLUS . ringarith
    (6) ringarith -> . ringarith PLUS ringarith
    (7) ringarith -> . ringarith MINUS ringarith
    (8) ringarith -> . ringarith TIMES ringarith
    (9) ringarith -> . ringarith DIVIDE ringarith
    (10) ringarith -> . ringarith POWER arith
    (11) ringarith -> . SCALAR

    SCALAR          shift and go to state 9

    ringarith                      shift and go to state 29

state 20

    (7) ringarith -> ringarith MINUS . ringarith
    (6) ringarith -> . ringarith PLUS ringarith
    (7) ringarith -> . ringarith MINUS ringarith
    (8) ringarith -> . ringarith TIMES ringarith
    (9) ringarith -> . ringarith DIVIDE ringarith
    (10) ringarith -> . ringarith POWER arith
    (11) ringarith -> . SCALAR

    SCALAR          shift and go to state 9

    ringarith                      shift and go to state 30

state 21

    (2) statement -> statement PLUS monomial .

    PLUS            reduce using rule 2 (statement -> statement PLUS monomial .)
    MINUS           reduce using rule 2 (statement -> statement PLUS monomial .)
    $end            reduce using rule 2 (statement -> statement PLUS monomial .)


state 22

    (27) monomial -> ringscalar VAR POWER . exparith
    (21) exparith -> . LPAREN arith RPAREN
    (22) exparith -> . NUMBER
    (23) exparith -> .

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 31
    PLUS            reduce using rule 23 (exparith -> .)
    MINUS           reduce using rule 23 (exparith -> .)
    $end            reduce using rule 23 (exparith -> .)

    exparith                       shift and go to state 32

state 23

    (9) ringarith -> ringarith DIVIDE ringarith .
    (6) ringarith -> ringarith . PLUS ringarith
    (7) ringarith -> ringarith . MINUS ringarith
    (8) ringarith -> ringarith . TIMES ringarith
    (9) ringarith -> ringarith . DIVIDE ringarith
    (10) ringarith -> ringarith . POWER arith

    PLUS            reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .)
    MINUS           reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .)
    TIMES           reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .)
    DIVIDE          reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .)
    RPAREN          reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .)
    POWER           shift and go to state 17

  ! POWER           [ reduce using rule 9 (ringarith -> ringarith DIVIDE ringarith .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]
  ! TIMES           [ shift and go to state 18 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 24

    (10) ringarith -> ringarith POWER arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 10 (ringarith -> ringarith POWER arith .)
    MINUS           reduce using rule 10 (ringarith -> ringarith POWER arith .)
    TIMES           reduce using rule 10 (ringarith -> ringarith POWER arith .)
    DIVIDE          reduce using rule 10 (ringarith -> ringarith POWER arith .)
    RPAREN          reduce using rule 10 (ringarith -> ringarith POWER arith .)
    POWER           shift and go to state 35

  ! POWER           [ reduce using rule 10 (ringarith -> ringarith POWER arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 34 ]


state 25

    (17) arith -> NUMBER .

    PLUS            reduce using rule 17 (arith -> NUMBER .)
    MINUS           reduce using rule 17 (arith -> NUMBER .)
    TIMES           reduce using rule 17 (arith -> NUMBER .)
    DIVIDE          reduce using rule 17 (arith -> NUMBER .)
    POWER           reduce using rule 17 (arith -> NUMBER .)
    RPAREN          reduce using rule 17 (arith -> NUMBER .)


state 26

    (20) arith -> LPAREN . arith RPAREN
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 39

state 27

    (18) arith -> MINUS . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 40

state 28

    (8) ringarith -> ringarith TIMES ringarith .
    (6) ringarith -> ringarith . PLUS ringarith
    (7) ringarith -> ringarith . MINUS ringarith
    (8) ringarith -> ringarith . TIMES ringarith
    (9) ringarith -> ringarith . DIVIDE ringarith
    (10) ringarith -> ringarith . POWER arith

    PLUS            reduce using rule 8 (ringarith -> ringarith TIMES ringarith .)
    MINUS           reduce using rule 8 (ringarith -> ringarith TIMES ringarith .)
    TIMES           reduce using rule 8 (ringarith -> ringarith TIMES ringarith .)
    DIVIDE          reduce using rule 8 (ringarith -> ringarith TIMES ringarith .)
    RPAREN          reduce using rule 8 (ringarith -> ringarith TIMES ringarith .)
    POWER           shift and go to state 17

  ! POWER           [ reduce using rule 8 (ringarith -> ringarith TIMES ringarith .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]
  ! TIMES           [ shift and go to state 18 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 29

    (6) ringarith -> ringarith PLUS ringarith .
    (6) ringarith -> ringarith . PLUS ringarith
    (7) ringarith -> ringarith . MINUS ringarith
    (8) ringarith -> ringarith . TIMES ringarith
    (9) ringarith -> ringarith . DIVIDE ringarith
    (10) ringarith -> ringarith . POWER arith

    PLUS            reduce using rule 6 (ringarith -> ringarith PLUS ringarith .)
    MINUS           reduce using rule 6 (ringarith -> ringarith PLUS ringarith .)
    RPAREN          reduce using rule 6 (ringarith -> ringarith PLUS ringarith .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17

  ! TIMES           [ reduce using rule 6 (ringarith -> ringarith PLUS ringarith .) ]
  ! DIVIDE          [ reduce using rule 6 (ringarith -> ringarith PLUS ringarith .) ]
  ! POWER           [ reduce using rule 6 (ringarith -> ringarith PLUS ringarith .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 30

    (7) ringarith -> ringarith MINUS ringarith .
    (6) ringarith -> ringarith . PLUS ringarith
    (7) ringarith -> ringarith . MINUS ringarith
    (8) ringarith -> ringarith . TIMES ringarith
    (9) ringarith -> ringarith . DIVIDE ringarith
    (10) ringarith -> ringarith . POWER arith

    PLUS            reduce using rule 7 (ringarith -> ringarith MINUS ringarith .)
    MINUS           reduce using rule 7 (ringarith -> ringarith MINUS ringarith .)
    RPAREN          reduce using rule 7 (ringarith -> ringarith MINUS ringarith .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17

  ! TIMES           [ reduce using rule 7 (ringarith -> ringarith MINUS ringarith .) ]
  ! DIVIDE          [ reduce using rule 7 (ringarith -> ringarith MINUS ringarith .) ]
  ! POWER           [ reduce using rule 7 (ringarith -> ringarith MINUS ringarith .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 31

    (22) exparith -> NUMBER .

    PLUS            reduce using rule 22 (exparith -> NUMBER .)
    MINUS           reduce using rule 22 (exparith -> NUMBER .)
    $end            reduce using rule 22 (exparith -> NUMBER .)


state 32

    (27) monomial -> ringscalar VAR POWER exparith .

    PLUS            reduce using rule 27 (monomial -> ringscalar VAR POWER exparith .)
    MINUS           reduce using rule 27 (monomial -> ringscalar VAR POWER exparith .)
    $end            reduce using rule 27 (monomial -> ringscalar VAR POWER exparith .)


state 33

    (21) exparith -> LPAREN . arith RPAREN
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 41

state 34

    (15) arith -> arith DIVIDE . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 42

state 35

    (16) arith -> arith POWER . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 43

state 36

    (14) arith -> arith TIMES . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 44

state 37

    (12) arith -> arith PLUS . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 45

state 38

    (13) arith -> arith MINUS . arith
    (12) arith -> . arith PLUS arith
    (13) arith -> . arith MINUS arith
    (14) arith -> . arith TIMES arith
    (15) arith -> . arith DIVIDE arith
    (16) arith -> . arith POWER arith
    (17) arith -> . NUMBER
    (18) arith -> . MINUS arith
    (20) arith -> . LPAREN arith RPAREN

    NUMBER          shift and go to state 25
    MINUS           shift and go to state 27
    LPAREN          shift and go to state 26

    arith                          shift and go to state 46

state 39

    (20) arith -> LPAREN arith . RPAREN
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    RPAREN          shift and go to state 47
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 34
    POWER           shift and go to state 35


state 40

    (18) arith -> MINUS arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 18 (arith -> MINUS arith .)
    MINUS           reduce using rule 18 (arith -> MINUS arith .)
    TIMES           reduce using rule 18 (arith -> MINUS arith .)
    DIVIDE          reduce using rule 18 (arith -> MINUS arith .)
    POWER           reduce using rule 18 (arith -> MINUS arith .)
    RPAREN          reduce using rule 18 (arith -> MINUS arith .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! POWER           [ shift and go to state 35 ]


state 41

    (21) exparith -> LPAREN arith . RPAREN
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 34
    POWER           shift and go to state 35


state 42

    (15) arith -> arith DIVIDE arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 15 (arith -> arith DIVIDE arith .)
    MINUS           reduce using rule 15 (arith -> arith DIVIDE arith .)
    TIMES           reduce using rule 15 (arith -> arith DIVIDE arith .)
    DIVIDE          reduce using rule 15 (arith -> arith DIVIDE arith .)
    RPAREN          reduce using rule 15 (arith -> arith DIVIDE arith .)
    POWER           shift and go to state 35

  ! POWER           [ reduce using rule 15 (arith -> arith DIVIDE arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 34 ]


state 43

    (16) arith -> arith POWER arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 16 (arith -> arith POWER arith .)
    MINUS           reduce using rule 16 (arith -> arith POWER arith .)
    TIMES           reduce using rule 16 (arith -> arith POWER arith .)
    DIVIDE          reduce using rule 16 (arith -> arith POWER arith .)
    RPAREN          reduce using rule 16 (arith -> arith POWER arith .)
    POWER           shift and go to state 35

  ! POWER           [ reduce using rule 16 (arith -> arith POWER arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 34 ]


state 44

    (14) arith -> arith TIMES arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 14 (arith -> arith TIMES arith .)
    MINUS           reduce using rule 14 (arith -> arith TIMES arith .)
    TIMES           reduce using rule 14 (arith -> arith TIMES arith .)
    DIVIDE          reduce using rule 14 (arith -> arith TIMES arith .)
    RPAREN          reduce using rule 14 (arith -> arith TIMES arith .)
    POWER           shift and go to state 35

  ! POWER           [ reduce using rule 14 (arith -> arith TIMES arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 34 ]


state 45

    (12) arith -> arith PLUS arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 12 (arith -> arith PLUS arith .)
    MINUS           reduce using rule 12 (arith -> arith PLUS arith .)
    RPAREN          reduce using rule 12 (arith -> arith PLUS arith .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 34
    POWER           shift and go to state 35

  ! TIMES           [ reduce using rule 12 (arith -> arith PLUS arith .) ]
  ! DIVIDE          [ reduce using rule 12 (arith -> arith PLUS arith .) ]
  ! POWER           [ reduce using rule 12 (arith -> arith PLUS arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 46

    (13) arith -> arith MINUS arith .
    (12) arith -> arith . PLUS arith
    (13) arith -> arith . MINUS arith
    (14) arith -> arith . TIMES arith
    (15) arith -> arith . DIVIDE arith
    (16) arith -> arith . POWER arith

    PLUS            reduce using rule 13 (arith -> arith MINUS arith .)
    MINUS           reduce using rule 13 (arith -> arith MINUS arith .)
    RPAREN          reduce using rule 13 (arith -> arith MINUS arith .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 34
    POWER           shift and go to state 35

  ! TIMES           [ reduce using rule 13 (arith -> arith MINUS arith .) ]
  ! DIVIDE          [ reduce using rule 13 (arith -> arith MINUS arith .) ]
  ! POWER           [ reduce using rule 13 (arith -> arith MINUS arith .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 47

    (20) arith -> LPAREN arith RPAREN .

    PLUS            reduce using rule 20 (arith -> LPAREN arith RPAREN .)
    MINUS           reduce using rule 20 (arith -> LPAREN arith RPAREN .)
    TIMES           reduce using rule 20 (arith -> LPAREN arith RPAREN .)
    DIVIDE          reduce using rule 20 (arith -> LPAREN arith RPAREN .)
    POWER           reduce using rule 20 (arith -> LPAREN arith RPAREN .)
    RPAREN          reduce using rule 20 (arith -> LPAREN arith RPAREN .)


state 48

    (21) exparith -> LPAREN arith RPAREN .

    PLUS            reduce using rule 21 (exparith -> LPAREN arith RPAREN .)
    MINUS           reduce using rule 21 (exparith -> LPAREN arith RPAREN .)
    $end            reduce using rule 21 (exparith -> LPAREN arith RPAREN .)

